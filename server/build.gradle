buildscript {
    ext{
        querydslVersion = "5.0.0"
        mooworkNodeVersion = "1.3.1"
        sshVersion = "2.10.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2' //restDoc
    id 'com.moowork.node' version "${mooworkNodeVersion}"
    id 'org.hidetake.ssh' version "${sshVersion}"
    id 'java'
}

ssh.settings{
    dryRun = project.hasProperty('dryRun')
}

remotes {
    backend {
        host = 'localhost'
        user = 'ubuntu'
        identity = file("${System.properties['user.home']}/.ssh/key.pem")
    }
}

task deployBE{
    doLast {
        ssh.run{
            session(remotes.backend){
                execute("sudo sh ./auton/scripts/stop.sh")

                put from: "${projectDir}/build/libs/blog-0.0.1-SNAPSHOT.jar", into: "./auton/app"

                execute("sudo nohup java -jar ./auton/app/blog-0.0.1-SNAPSHOT.jar nohup.out 2>&1 &")
            }
        }
    }
}

group = 'com.choo'
version = '0.0.1-SNAPSHOT'
description = 'blog'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    snippetDir = file('build/generated-snippets')
    reactDir = file('src/main/client')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'


    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.mockito:mockito-inline:4.5.1'
}

test{
    useJUnitPlatform()
    outputs.dir snippetDir //생성된 파일을 미리 생성한 디렉토리(build/generated-snippets)에 저장
}

asciidoctor{
    inputs.dir snippetDir
    configurations 'asciidoctorExtensions'
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task runReactServer(type: NpmTask) {
    workingDir = reactDir
    args = ["run", "dev"]
}


task buildReactServer(type: NpmTask){
    workingDir = reactDir
    args = ["run", "build"]
}

build {
    dependsOn copyDocument
}